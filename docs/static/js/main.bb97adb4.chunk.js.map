{"version":3,"sources":["compoents/AnimatedSpan.tsx","compoents/Phone.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","assets/logo.png","assets/phone.jpg"],"names":["TextScroll","props","content","defaultState","contentWidth","left","duration","_useState","useState","_useState2","_slicedToArray","state","setState","ref","useRef","useEffect","_ref","current","offsetWidth","parentElement","_objectSpread","timing","animationName","concat","Text","styled","p","_templateObject","_taggedTemplateLiteral","React","createElement","className","defaultProps","memo","Phone","message","src","phoneImage","alt","width","height","AnimatedSpan","App","setInitialized","_useState3","Date","toISOString","_useState4","setMessage","OneSignal","init","appId","promptOptions","slidedown","prompts","type","autoPrompt","text","actionMessage","acceptButton","cancelButton","delay","pageViews","timeDelay","then","showSlidedownPrompt","console","log","addListenerForNotificationOpened","data","heading","logo","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.bb97adb4.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport styled from \"styled-components\";\n\ninterface TextScrollProps {\n    /**\n     * 内容\n     */\n    content: string\n    /**\n     * 持续时间/s\n     */\n    duration: number\n  }\n  \n  function TextScroll(props: TextScrollProps) {\n    const { content, duration } = props\n  \n    const defaultState = {\n      contentWidth: 0,\n      left: 0,\n      duration,\n    }\n  \n    const [state, setState] = useState(defaultState)\n  \n    let ref = useRef<HTMLParagraphElement>(null)\n  \n    useEffect(() => {\n      const { offsetWidth, parentElement } = ref.current as HTMLParagraphElement\n  \n      setState({\n        ...state,\n        contentWidth: offsetWidth,\n        left: parentElement!.offsetWidth,\n      })\n    }, [content])\n  \n    const { contentWidth, left, duration: timing } = state\n  \n    const animationName = `marquee_${contentWidth}`\n  \n    const Text = styled.p`\n      position: relative;\n      left: ${left}px;\n      animation: ${animationName} ${timing}s linear infinite both;\n      animation-play-state: running;\n      animation-fill-mode: forwards;\n  \n      @keyframes ${animationName} {\n        0% {\n          transform: translateX(0px);\n        }\n  \n        100% {\n          transform: translateX(-${contentWidth + left}px);\n        }\n      }\n    `\n  \n    return (\n      <div className=\"marquee_box\">\n        <Text ref={ref}>{content}</Text>\n      </div>\n    )\n  }\n  TextScroll.defaultProps = {\n    content: '',\n    duration: 3,\n  }\n  \n  export default React.memo(TextScroll)","import React from 'react';\nimport phoneImage from '../assets/phone.jpg';\nimport AnimatedSpan from './AnimatedSpan';\n\ninterface Props {\n    message?: string\n}\n\nexport default function Phone({ message }: Props) {\n\n    return (\n        <div className=\"phone\">\n            <img\n                src={phoneImage}\n                alt=\"Phone\"\n                width=\"190\"\n                height=\"410\"\n            />\n            <AnimatedSpan content={message} duration={5} />\n        </div>)\n}","import React, { useEffect, useState } from 'react';\nimport logo from './assets/logo.png';\nimport './App.css';\nimport Phone from './compoents/Phone';\nimport OneSignal from 'react-onesignal';\n\ntype Notification = {\n  id: string;\n  heading: string;\n  content: string;\n  data: any;\n};\n\nfunction App() {\n  const [initialized, setInitialized] = useState(false);\n  const [message, setMessage] = useState(new Date().toISOString());\n\n  useEffect(() => {\n    OneSignal.init({\n      appId: '4141a199-dcc1-4ac0-95c4-d8c15258d208',\n      promptOptions: {\n        slidedown: {\n          prompts: [\n            {\n              type: \"push\", // current types are \"push\" & \"category\"\n              autoPrompt: true,\n              text: {\n                /* limited to 90 characters */\n                actionMessage: \"请允许接受我们的推送通知，以免错过最新最全资讯哦！\",\n                /* acceptButton limited to 15 characters */\n                acceptButton: \"马上允许\",\n                /* cancelButton limited to 15 characters */\n                cancelButton: \"再想想\"\n              },\n              delay: {\n                pageViews: 1,\n                timeDelay: 1\n              }\n            }\n          ]\n        }\n      }\n    }).then(() => {\n      setInitialized(true)\n      OneSignal.showSlidedownPrompt().then(() => {\n        console.log('OneSignal prompt shown');\n      });\n\n      OneSignal.addListenerForNotificationOpened((data: any) => {\n        const {content,heading} = data as Notification;\n        // window.alert(\"Received NotificationOpened:\" + JSON.stringify(data))\n        setMessage(`${heading}：${content}`);\n      });\n    })\n\n  }, [setInitialized]);\n\n  return (\n    <main>\n      <img src={logo}\n        alt=\"Logo\"\n        width=\"106\"\n        height=\"36\"\n      />\n\n      <Phone message={message} />\n\n      <a className=\"download-btn\" href=\"https://article.zlink.toutiao.com/d13Q\">下载今日头条</a>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(swUrl:string,config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.register(`${process.env.PUBLIC_URL}/service-worker.js`);\nserviceWorkerRegistration.register(`${process.env.PUBLIC_URL}/OneSignalSDKWorker.js`);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.7132cb1b.png\";","module.exports = __webpack_public_path__ + \"static/media/phone.d630886d.jpg\";"],"sourceRoot":""}