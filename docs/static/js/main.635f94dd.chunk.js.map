{"version":3,"sources":["assets/logo.png","assets/phone.jpg","compoents/Phone.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Phone","React","createElement","className","src","phoneImage","alt","width","height","App","logo","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","OneSignal","init","appId","promptOptions","slidedown","prompts","type","autoPrompt","text","actionMessage","acceptButton","cancelButton","delay","pageViews","timeDelay","showSlidedownPrompt","ReactDOM","createRoot","document","getElementById","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","concat"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0OCGzB,SAASC,IAGpB,OACIC,IAAAC,cAAA,OAAKC,UAAU,SACXF,IAAAC,cAAA,OACIE,IAAKC,IACLC,IAAI,QACJC,MAAM,MACNC,OAAO,QAEXP,IAAAC,cAAA,QAAMC,UAAU,WAVR,mBCiBLM,MAhBf,WACE,OACER,IAAAC,cAAA,YACED,IAAAC,cAAA,OAAKE,IAAKM,IACRJ,IAAI,OACJC,MAAM,MACNC,OAAO,OAGTP,IAAAC,cAACF,EAAK,MAENC,IAAAC,cAAA,KAAGC,UAAU,eAAeQ,KAAK,0CAAyC,0CCJ1EC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAyCnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,KChGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC1C,EAAA2C,EAAA,GAAAjB,KAAA1B,EAAA4C,KAAA,UAAqBlB,KAAK,SAAAmB,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,aCDdU,IAAUC,KAAK,CACbC,MAAO,uCACPC,cAAe,CACbC,UAAW,CACTC,QAAS,CACP,CACEC,KAAM,OACNC,YAAY,EACZC,KAAM,CAEJC,cAAe,yJAEfC,aAAc,2BAEdC,aAAc,sBAEhBC,MAAO,CACLC,UAAW,EACXC,UAAW,SAMpBvC,KAAK,WACNyB,IAAUe,sBAAsBxC,KAAK,WACnCQ,QAAQC,IAAI,8BAIHgC,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACHpE,IAAAC,cAACD,IAAMqE,WAAU,KACfrE,IAAAC,cAACO,EAAG,QFlBD,SAAkBU,EAAaC,GACpC,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkD,IAAIC,GAAwB1D,OAAOC,SAASJ,MACpD8D,SAAW3D,OAAOC,SAAS0D,OAIvC,OAGF3D,OAAO4D,iBAAiB,OAAQ,WAE1B9D,GAgEV,SAAiCO,EAAeC,GAE9CuD,MAAMxD,EAAO,CACXyD,QAAS,CAAEC,iBAAkB,YAE5BrD,KAAK,SAACsD,GAEL,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7D,UAAUC,cAAc6D,MAAM3D,KAAK,SAACC,GAClCA,EAAa2D,aAAa5D,KAAK,WAC7BV,OAAOC,SAASsE,aAKpBnE,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IAAI,mEAtFVqD,CAAwBnE,EAAOC,GAI/BC,UAAUC,cAAc6D,MAAM3D,KAAK,WACjCQ,QAAQC,IACN,8GAMJf,EAAgBC,EAAOC,MEH/BmE,CAAkC,GAAAC,OAAIhB,GAAsB,2BAK5DlC","file":"static/js/main.635f94dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7132cb1b.png\";","module.exports = __webpack_public_path__ + \"static/media/phone.d630886d.jpg\";","import React from 'react';\nimport phoneImage from '../assets/phone.jpg';\n\nexport default function Phone() {\n    const message = \"Hello World! 3\";\n\n    return (\n        <div className=\"phone\">\n            <img\n                src={phoneImage}\n                alt=\"Phone\"\n                width=\"190\"\n                height=\"410\"\n            />\n            <span className=\"message\">\n                {message}\n            </span>\n        </div>)\n}","import React from 'react';\nimport logo from './assets/logo.png';\nimport './App.css';\nimport Phone from './compoents/Phone';\n\nfunction App() {\n  return (\n    <main>\n      <img src={logo}\n        alt=\"Logo\"\n        width=\"106\"\n        height=\"36\"\n      />\n\n      <Phone />\n\n      <a className=\"download-btn\" href=\"https://article.zlink.toutiao.com/d13Q\">下载今日头条</a>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(swUrl:string,config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport OneSignal from 'react-onesignal';\n\nOneSignal.init({\n  appId: '4141a199-dcc1-4ac0-95c4-d8c15258d208',\n  promptOptions: {\n    slidedown: {\n      prompts: [\n        {\n          type: \"push\", // current types are \"push\" & \"category\"\n          autoPrompt: true,\n          text: {\n            /* limited to 90 characters */\n            actionMessage: \"请允许接受我们的推送通知，以免错过最新最全资讯哦！\",\n            /* acceptButton limited to 15 characters */\n            acceptButton: \"马上允许\",\n            /* cancelButton limited to 15 characters */\n            cancelButton: \"再想想\"\n          },\n          delay: {\n            pageViews: 1,\n            timeDelay: 1\n          }\n        }\n      ]\n    }\n  }\n}).then(() => {\n  OneSignal.showSlidedownPrompt().then(() => {\n    console.log('OneSignal prompt shown');\n  });\n})\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.register(`${process.env.PUBLIC_URL}/service-worker.js`);\nserviceWorkerRegistration.register(`${process.env.PUBLIC_URL}/OneSignalSDKWorker.js`);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}